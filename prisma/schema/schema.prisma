generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(nanoid(21))
  name             String?
  email            String          @unique
  emailVerified    DateTime?       @map("email_verified")
  image            String?
  bio              String?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  deletedAt        DateTime?       @map("deleted_at")
  stripeCustomerId String?         @map("stripe_customer_id")
  plan             UserPlan        @default(FREE)
  resendContactId  String?         @map("resend_contact_id") @unique
  passwordHash     String?         @map("password_hash") @unique
  role             UserRole        @default(GLEANER)
  language         Language        @default(FRENCH)
  accounts         Account[]
  agendas          Agenda[]
  announcements    Announcement[]
  comments         Comment[]
  farms            Farm[]
  favorites        Favorite[]
  feedbacks        Feedback[]
  fields           Field[]
  gleanings        Gleaning[]
  likes            Like[]
  notifications    Notification[]
  participations   Participation[]
  reviews          Review[]
  sessions         Session[]
  statistics       Statistics? // Relation 1-1 ou 1-N ? (1-N pour historique)

  @@index([createdAt])
  @@index([email])
  @@map("users")
}

model Farm {
  id          String   @id @default(nanoid(21))
  ownerId     String   @map("owner_id")
  name        String
  slug        String   @unique @default(nanoid(6))
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  city        String?
  contactInfo String?  @map("contact_info")
  latitude    Float?
  longitude   Float?
  postalCode  String?  @map("postal_code")
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  fields      Field[]

  @@index([slug])
  @@map("farms")
}

model Review {
  id         String   @id @default(nanoid(21))
  userId     String   @map("user_id")
  rating     Int      // Limiter à 1-5 (ex: avec Zod)
  content    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  gleaningId String   @map("gleaning_id")
  gleaning   Gleaning @relation(fields: [gleaningId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Comment {
  id             String       @id @default(nanoid(21))
  userId         String       @map("user_id")
  announcementId String       @map("announcement_id")
  content        String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id             String       @id @default(nanoid(21))
  userId         String       @map("user_id")
  announcementId String       @map("announcement_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Favorite {
  id             String       @id @default(nanoid(21))
  userId         String       @map("user_id")
  announcementId String       @map("announcement_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("favorites")
}

model Feedback {
  id        String   @id @default(nanoid(21))
  message   String
  email     String?
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Agenda {
  id             String        @id @default(nanoid(21))
  userId         String        @map("user_id")
  announcementId String        @map("announcement_id")
  startDate      DateTime      @map("start_date")
  endDate        DateTime      @map("end_date")
  title          String
  description    String?
  status         AgendaStatus  @default(PENDING)
  notificationId String?       @unique @map("notification_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  announcement   Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  notification   Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("agendas")
}

model Notification {
  id        String           @id @default(nanoid(21))
  userId    String           @map("user_id")
  type      NotificationType
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  agendaId  String?          @unique @map("agenda_id")
  agenda    Agenda?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Field {
  id             String           @id @default(nanoid(21))
  farmId         String?          @map("farm_id") // Lien optionnel à une ferme
  name           String
  slug           String           @unique @default(nanoid(6))
  description    String?
  isAvailable    Boolean          @default(true) @map("is_available")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  city           String
  cropTypeId     String           @map("crop_type_id")
  latitude       Float
  longitude      Float
  postalCode     String           @map("postal_code")
  qrCode         String?          @map("qr_code_url")
  ownerId        String?          @map("owner_id")  // Propriétaire direct (individu ou ferme)
  announcement   Announcement[]
  cropType       CropType         @relation(fields: [cropTypeId], references: [id])
  farm           Farm?            @relation(fields: [farmId], references: [id], onDelete: Cascade)
  owner          User?            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  gleaningPeriod GleaningPeriod[]

  @@index([slug])
  @@map("fields")
}

model CropType {
  id           String         @id @default(nanoid(21))
  name         String         @unique
  category     CropCategory
  season       CropSeason
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  announcement Announcement[]
  field        Field[]

  @@map("crop_types")
}

model Statistics {
  id                 String   @id @default(nanoid(21))
  userId             String   @unique @map("user_id")
  totalGlanages      Int      @default(0) @map("total_glanages")
  totalFoodSaved     Float    @default(0) @map("total_food_saved")
  totalFields        Int      @default(0) @map("total_fields")
  totalAnnouncements Int      @default(0) @map("total_announcements")
  lastUpdated        DateTime @updatedAt @map("last_updated")
  user               User     @relation(fields: [userId], references: [id])

  @@map("statistics")
}

model Announcement {
  id                String                        @id @default(nanoid(21))
  fieldId           String                        @map("field_id")
  title             String
  slug              String                        @unique @default(nanoid(6))
  description       String
  createdAt         DateTime                      @default(now()) @map("created_at")
  updatedAt         DateTime                      @updatedAt @map("updated_at")
  isPublished       Boolean                       @default(true) @map("is_published")
  cropTypeId        String                        @map("crop_type_id")
  quantityAvailable Int?                          @map("quantity_available")
  ownerId           String                        @map("owner_id")
  agendas           Agenda[]
  cropType          CropType                      @relation(fields: [cropTypeId], references: [id])
  field             Field                         @relation(fields: [fieldId], references: [id])
  owner             User                          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments          Comment[]
  favorites         Favorite[]
  gleanings         Gleaning[]
  likes             Like[]
  participations    Participation[]
  gleaningPeriods   AnnouncementGleaningPeriods[]

  @@index([slug])
  @@index([fieldId, cropTypeId])
  @@map("announcements")
}

model GleaningPeriod {
  id            String                        @id @default(nanoid(21))
  fieldId       String                        @map("field_id")
  startDate     DateTime                      @map("start_date")
  endDate       DateTime                      @map("end_date")
  status        GleaningPeriodStatus          @default(AVAILABLE)
  field         Field                         @relation(fields: [fieldId], references: [id])
  announcements AnnouncementGleaningPeriods[]

  @@map("gleaning_periods")
}

model Gleaning {
  id             String                  @id @default(nanoid(21))
  userId         String                  @map("user_id")
  announcementId String                  @map("announcement_id")
  status         GleaningStatus          @default(PENDING)
  createdAt      DateTime                @default(now()) @map("created_at")
  updatedAt      DateTime                @updatedAt @map("updated_at")
  announcement   Announcement            @relation(fields: [announcementId], references: [id])
  user           User                    @relation(fields: [userId], references: [id])
  reviews        Review[]
  participations GleaningParticipation[]

  @@unique([userId, announcementId])
  @@map("gleanings")
}

model Participation {
  id                     String                  @id @default(nanoid(21))
  userId                 String                  @map("user_id")
  announcementId         String                  @map("announcement_id")
  status                 ParticipationStatus     @default(CONFIRMED)
  createdAt              DateTime                @default(now()) @map("created_at")
  announcement           Announcement            @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  gleaningParticipations GleaningParticipation[]

  @@unique([userId, announcementId])
  @@map("participations")
}

model AnnouncementGleaningPeriods {
  announcementId   String @map("announcement_id")
  gleaningPeriodId String @map("gleaning_period_id")

  announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  gleaningPeriod GleaningPeriod @relation(fields: [gleaningPeriodId], references: [id], onDelete: Cascade)

  @@id([announcementId, gleaningPeriodId])
  @@map("announcement_gleaning_periods")
}

model GleaningParticipation {
  gleaningId      String @map("gleaning_id")
  participationId String @map("participation_id")

  gleaning      Gleaning      @relation(fields: [gleaningId], references: [id], onDelete: Cascade)
  participation Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  @@id([gleaningId, participationId])
  @@map("gleaning_participations")
}

enum ParticipationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
  NO_SHOW
}

enum UserPlan {
  FREE
  PREMIUM
}

enum UserRole {
  FARMER
  GLEANER
  ADMIN
}

enum GleaningStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  NEW_ANNOUNCEMENT
  RESERVATION_REQUEST
  FIELD_UPDATED
  GLEANING_ACCEPTED
}

enum Language {
  ENGLISH
  FRENCH
  DUTCH
}

enum GleaningPeriodStatus {
  AVAILABLE
  NOT_AVAILABLE
  PENDING
  CLOSED
}

enum CropCategory {
  VEGETABLE
  FRUIT
}

enum CropSeason {
  SPRING
  SUMMER
  FALL
  WINTER
  YEAR_ROUND
}

enum AgendaStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}