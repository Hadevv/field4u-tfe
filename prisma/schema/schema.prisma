generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// -- Contraintes CHECK pour les tables
// ALTER TABLE "reviews" ADD CONSTRAINT rating_range CHECK (rating BETWEEN 1 AND 5);
// ALTER TABLE "gleanings" ADD CONSTRAINT quantity_non_negative CHECK (quantity_available >= 0);
// ALTER TABLE "gleaning_periods" ADD CONSTRAINT valid_date_range CHECK (start_date < end_date);
// ALTER TABLE "fields" ADD CONSTRAINT ownership_check CHECK (
//     (farm_id IS NOT NULL AND owner_id IS NULL) 
//     OR 
//     (farm_id IS NULL AND owner_id IS NOT NULL)
// );
model User {
  id                  String          @id @default(nanoid(21)) @db.Char(21)
  name                String?         @db.VarChar(100)
  email               String          @unique @db.VarChar(254)
  emailVerified       DateTime?       @map("email_verified")
  image               String?         @db.VarChar(500)
  bio                 String?         @db.VarChar(500)
  city                String?         @db.VarChar(50)
  postalCode          String?         @map("postal_code") @db.VarChar(10)
  termsAcceptedAt     DateTime?       @map("terms_accepted_at")
  rulesAcceptedAt     DateTime?       @map("rules_accepted_at")
  acceptGeolocation   Boolean         @default(false) @map("accept_geolocation")
  onboardingCompleted Boolean         @default(false) @map("onboarding_completed")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  deletedAt           DateTime?       @map("deleted_at")
  stripeCustomerId    String?         @map("stripe_customer_id") @db.VarChar(255)
  plan                UserPlan        @default(FREE)
  resendContactId     String?         @map("resend_contact_id") @db.VarChar(255)
  hashedPassword      String?         @map("password_hash") @db.VarChar(255) // nullable car j'utilise OAuth
  role                UserRole        @default(GLEANER)
  language            Language        @default(FRENCH)
  accounts            Account[]
  announcements       Announcement[]
  farms               Farm[]
  favorites           Favorite[]
  feedbacks           Feedback[]
  fields              Field[]
  likes               Like[]
  notifications       Notification[]
  participations      Participation[]
  reviews             Review[]
  sessions            Session[]
  statistics          Statistic[]

  @@index([createdAt])
  @@index([email])
  @@map("users")
}

model Farm {
  id          String   @id @default(nanoid(21)) @db.Char(21)
  ownerId     String   @map("owner_id") @db.Char(21) // Propriétaire direct (individu ou ferme)
  name        String   @db.VarChar(255)
  slug        String   @unique @default(nanoid(6)) @db.Char(6) // Slug pour URL 
  description String?  @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  city        String?  @db.VarChar(100)
  contactInfo String?  @map("contact_info") @db.VarChar(255)
  latitude    Float?
  longitude   Float?
  postalCode  String?  @map("postal_code") @db.VarChar(10)
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  fields      Field[]

  @@index([city, postalCode])
  @@index([slug])
  @@map("farms")
}

model Review {
  id         String   @id @default(nanoid(21)) @db.Char(21)
  userId     String   @map("user_id") @db.Char(21)
  rating     Int      @db.SmallInt // Gérer coté SQL car prisma ne gere pas le CHECK
  content    String?  @db.VarChar(500)
  images     String[] @default([]) @db.VarChar(255) // URL des images 
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  gleaningId String   @map("gleaning_id") @db.Char(21)
  gleaning   Gleaning @relation(fields: [gleaningId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  //CHECK SQL : Rating est limiter à 1-5

  @@map("reviews")
}

model Like {
  id             String       @id @default(nanoid(21)) @db.Char(21)
  userId         String       @map("user_id") @db.Char(21)
  announcementId String       @map("announcement_id") @db.Char(21)
  createdAt      DateTime     @default(now()) @map("created_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Favorite {
  id             String       @id @default(nanoid(21)) @db.Char(21)
  userId         String       @map("user_id") @db.Char(21)
  announcementId String       @map("announcement_id") @db.Char(21)
  createdAt      DateTime     @default(now()) @map("created_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("favorites")
}

model Feedback {
  id        String   @id @default(nanoid(21)) @db.Char(21)
  message   String   @db.VarChar(1000)
  email     String?  @db.VarChar(254)
  userId    String?  @map("user_id") @db.Char(21)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Notification {
  id        String           @id @default(nanoid(21)) @db.Char(21)
  userId    String           @map("user_id") @db.Char(21)
  type      NotificationType
  message   String           @db.VarChar(255)
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Field {
  id           String         @id @default(nanoid(21)) @db.Char(21)
  farmId       String?        @map("farm_id") @db.Char(21) // Lien optionnel à une fermes
  name         String?        @db.VarChar(100) // Nom donné par l’agriculteur (ex : "Champ du Nord")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  city         String         @db.VarChar(100)
  surface      Float?         @map("surface") // Surface du champ en hectares (optionnel)
  postalCode   String         @map("postal_code") @db.VarChar(10)
  ownerId      String?        @map("owner_id") @db.Char(21) // Propriétaire direct (individu ou ferme)
  latitude     Float
  longitude    Float
  announcement Announcement[]
  farm         Farm?          @relation(fields: [farmId], references: [id], onDelete: Cascade)
  owner        User?          @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  //CHECK SQL : Un champ doit être lié à une ferme OU à un utilisateur, pas les deux
  @@index([latitude, longitude])
  @@map("fields")
}

model CropType {
  id           String         @id @default(nanoid(21)) @db.Char(21)
  name         String         @unique @db.VarChar(100)
  category     CropCategory
  season       CropSeason
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  announcement Announcement[]

  @@map("crop_types")
}

model Statistic {
  id                 String   @id @default(nanoid(21)) @db.Char(21)
  userId             String   @map("user_id") @db.Char(21)
  totalGleanings     Int      @default(0) @map("total_gleanings")
  totalFoodSaved     Float    @default(0) @map("total_food_saved")
  totalFields        Int      @default(0) @map("total_fields")
  totalAnnouncements Int      @default(0) @map("total_announcements")
  lastUpdated        DateTime @updatedAt @map("last_updated")
  user               User     @relation(fields: [userId], references: [id])

  @@map("statistics")
}

model Announcement {
  id                String                       @id @default(nanoid(21)) @db.Char(21)
  fieldId           String                       @map("field_id") @db.Char(21)
  title             String                       @db.VarChar(255)
  slug              String                       @unique @default(nanoid(6)) @db.Char(6)
  description       String                       @db.VarChar(2000)
  images            String[]                     @default([]) @db.VarChar(255) // URL des images
  createdAt         DateTime                     @default(now()) @map("created_at")
  updatedAt         DateTime                     @updatedAt @map("updated_at")
  isPublished       Boolean                      @default(true) @map("is_published")
  cropTypeId        String                       @map("crop_type_id") @db.Char(21)
  quantityAvailable Int?                         @map("quantity_available")
  ownerId           String                       @map("owner_id") @db.Char(21)
  qrCode            String?                      @map("qr_code_url") @db.VarChar(255)
  cropType          CropType                     @relation(fields: [cropTypeId], references: [id])
  field             Field                        @relation(fields: [fieldId], references: [id])
  owner             User                         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  favorites         Favorite[]
  gleaning          Gleaning[]
  likes             Like[]
  gleaningPeriods   AnnouncementGleaningPeriod[]

  //CHECK SQL : Éviter les valeurs négatives pour quantity_available

  @@index([slug])
  @@index([fieldId, cropTypeId])
  @@map("announcements")
}

model GleaningPeriod {
  id            String                       @id @default(nanoid(21)) @db.Char(21)
  startDate     DateTime                     @map("start_date")
  endDate       DateTime                     @map("end_date")
  status        GleaningPeriodStatus         @default(AVAILABLE)
  announcements AnnouncementGleaningPeriod[]

  //CHECK SQL : Vérifier que startDate < endDate via une contrainte SQL

  @@map("gleaning_periods")
}

model Gleaning {
  id             String          @id @default(nanoid(21)) @db.Char(21)
  announcementId String          @map("announcement_id") @db.Char(21)
  status         GleaningStatus  @default(PENDING)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  announcement   Announcement    @relation(fields: [announcementId], references: [id])
  reviews        Review[]
  participations Participation[]

  @@unique([announcementId])
  @@map("gleanings")
}

// table de liaison entre un utilisateur et un glanage
model Participation {
  id         String              @id @default(nanoid(21)) @db.Char(21)
  userId     String              @map("user_id") @db.Char(21)
  gleaningId String              @map("gleaning_id") @db.Char(21)
  status     ParticipationStatus @default(CONFIRMED)
  createdAt  DateTime            @default(now()) @map("created_at")
  gleaning   Gleaning            @relation(fields: [gleaningId], references: [id], onDelete: Cascade)
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gleaningId])
  @@map("participations")
}

// table de liaison entre les annonces et les périodes de glanage
model AnnouncementGleaningPeriod {
  announcementId   String @map("announcement_id") @db.Char(21)
  gleaningPeriodId String @map("gleaning_period_id") @db.Char(21)

  announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  gleaningPeriod GleaningPeriod @relation(fields: [gleaningPeriodId], references: [id], onDelete: Cascade)

  @@id([announcementId, gleaningPeriodId])
  @@index([announcementId])
  @@index([gleaningPeriodId])
  @@map("announcement_gleaning_periods")
}

enum ParticipationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
  NO_SHOW
}

enum UserPlan {
  FREE
  PREMIUM
}

enum UserRole {
  FARMER
  GLEANER
  ADMIN
}

enum GleaningStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  NEW_ANNOUNCEMENT
  RESERVATION_REQUEST
  FIELD_UPDATED
  GLEANING_ACCEPTED
  NEW_REVIEW
  GLEANING_REMINDER
  GLEANING_CANCELLED
}

enum Language {
  ENGLISH
  FRENCH
  DUTCH
}

enum GleaningPeriodStatus {
  AVAILABLE
  NOT_AVAILABLE
  PENDING
  CLOSED
}

enum CropCategory {
  VEGETABLE
  FRUIT
}

enum CropSeason {
  SPRING
  SUMMER
  FALL
  WINTER
  YEAR_ROUND
}
