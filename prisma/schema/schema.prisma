generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis, unaccent]
}

model User {
  id                   String          @id @default(nanoid(21)) @db.Char(21)
  name                 String?         @db.VarChar(100)
  email                String          @unique @db.VarChar(254)
  image                String?         @db.VarChar(500)
  bio                  String?         @db.VarChar(500)
  plan                 UserPlan        @default(FREE)
  role                 UserRole        @default(GLEANER)
  language             Language        @default(FRENCH)
  createdAt            DateTime        @default(now()) @map("created_at")
  deletedAt            DateTime?       @map("deleted_at")
  emailVerified        DateTime?       @map("email_verified")
  hashedPassword       String?         @map("password_hash") @db.VarChar(255)
  resendContactId      String?         @map("resend_contact_id") @db.VarChar(255)
  stripeCustomerId     String?         @map("stripe_customer_id") @db.VarChar(255)
  updatedAt            DateTime        @updatedAt @map("updated_at")
  onboardingCompleted  Boolean         @default(false) @map("onboarding_completed")
  acceptGeolocation    Boolean         @default(false) @map("accept_geolocation")
  city                 String?         @db.VarChar(50)
  postalCode           String?         @map("postal_code") @db.VarChar(10)
  rulesAcceptedAt      DateTime?       @map("rules_accepted_at")
  termsAcceptedAt      DateTime?       @map("terms_accepted_at")
  notificationsEnabled Boolean         @default(true) @map("notifications_enabled")
  accounts             Account[]
  announcements        Announcement[]
  farms                Farm[]
  favorites            Favorite[]
  feedbacks            Feedback[]
  fields               Field[]
  likes                Like[]
  notifications        Notification[]
  participations       Participation[]
  reviews              Review[]
  sessions             Session[]
  statistics           Statistic[]

  @@index([createdAt])
  @@index([email])
  @@map("users")
}

model Farm {
  id          String   @id @default(nanoid(21)) @db.Char(21)
  name        String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(500)
  city        String?  @db.VarChar(100)
  postalCode  String?  @map("postal_code") @db.VarChar(10)
  contactInfo String?  @map("contact_info") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  ownerId     String   @map("owner_id") @db.Char(21)
  updatedAt   DateTime @updatedAt @map("updated_at")
  latitude    Float?
  longitude   Float?
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  fields      Field[]

  @@index([city, postalCode])
  @@index([slug])
  @@map("farms")
}

model Review {
  id         String   @id @default(nanoid(21)) @db.Char(21)
  rating     Int      @db.SmallInt
  content    String?  @db.VarChar(500)
  createdAt  DateTime @default(now()) @map("created_at")
  gleaningId String   @map("gleaning_id") @db.Char(21)
  updatedAt  DateTime @updatedAt @map("updated_at")
  userId     String   @map("user_id") @db.Char(21)
  images     String[] @default([]) @db.VarChar(255)
  gleaning   Gleaning @relation(fields: [gleaningId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Like {
  id             String       @id @default(nanoid(21)) @db.Char(21)
  announcementId String       @map("announcement_id") @db.Char(21)
  createdAt      DateTime     @default(now()) @map("created_at")
  userId         String       @map("user_id") @db.Char(21)
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Favorite {
  id             String       @id @default(nanoid(21)) @db.Char(21)
  announcementId String       @map("announcement_id") @db.Char(21)
  createdAt      DateTime     @default(now()) @map("created_at")
  userId         String       @map("user_id") @db.Char(21)
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("favorites")
}

model Feedback {
  id        String   @id @default(nanoid(21)) @db.Char(21)
  message   String   @db.VarChar(1000)
  email     String?  @db.VarChar(254)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String?  @map("user_id") @db.Char(21)
  user      User?    @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Notification {
  id        String           @id @default(nanoid(21)) @db.Char(21)
  type      NotificationType
  message   String           @db.VarChar(255)
  createdAt DateTime         @default(now()) @map("created_at")
  isRead    Boolean          @default(false) @map("is_read")
  updatedAt DateTime         @updatedAt @map("updated_at")
  userId    String           @map("user_id") @db.Char(21)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Field {
  id           String         @id @default(nanoid(21)) @db.Char(21)
  name         String?        @db.VarChar(100)
  city         String         @db.VarChar(100)
  postalCode   String         @map("postal_code") @db.VarChar(10)
  createdAt    DateTime       @default(now()) @map("created_at")
  farmId       String?        @map("farm_id") @db.Char(21)
  ownerId      String?        @map("owner_id") @db.Char(21)
  updatedAt    DateTime       @updatedAt @map("updated_at")
  surface      Float?         @map("surface")
  latitude     Float
  longitude    Float
  announcement Announcement[]
  farm         Farm?          @relation(fields: [farmId], references: [id], onDelete: Cascade)
  owner        User?          @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([latitude, longitude])
  @@map("fields")
}

model CropType {
  id           String         @id @default(nanoid(21)) @db.Char(21)
  name         String         @unique @db.VarChar(100)
  season       CropSeason
  category     CropCategory
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  announcement Announcement[]

  @@map("crop_types")
}

model Statistic {
  id                 String   @id @default(nanoid(21)) @db.Char(21)
  lastUpdated        DateTime @updatedAt @map("last_updated")
  totalAnnouncements Int      @default(0) @map("total_announcements")
  totalFields        Int      @default(0) @map("total_fields")
  totalFoodSaved     Float    @default(0) @map("total_food_saved")
  userId             String   @map("user_id") @db.Char(21)
  totalGleanings     Int      @default(0) @map("total_gleanings")
  user               User     @relation(fields: [userId], references: [id])

  @@map("statistics")
}

model Announcement {
  id                String     @id @default(nanoid(21)) @db.Char(21)
  title             String     @db.VarChar(255)
  slug              String     @unique @db.VarChar(100)
  description       String     @db.VarChar(2000)
  createdAt         DateTime   @default(now()) @map("created_at")
  cropTypeId        String     @map("crop_type_id") @db.Char(21)
  fieldId           String     @map("field_id") @db.Char(21)
  isPublished       Boolean    @default(true) @map("is_published")
  ownerId           String     @map("owner_id") @db.Char(21)
  quantityAvailable Int?       @map("quantity_available")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  images            String[]   @default([]) @db.VarChar(255)
  qrCode            String?    @map("qr_code_url") @db.VarChar(255)
  endDate           DateTime?  @map("end_date")
  startDate         DateTime?  @map("start_date")
  suggestedPrice    Decimal?   @map("suggested_price") @db.Decimal(10, 2)
  cropType          CropType   @relation(fields: [cropTypeId], references: [id])
  field             Field      @relation(fields: [fieldId], references: [id])
  owner             User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  favorites         Favorite[]
  gleaning          Gleaning?
  likes             Like[]

  @@index([slug])
  @@index([fieldId, cropTypeId])
  @@map("announcements")
}

model Gleaning {
  id             String          @id @default(nanoid(21)) @db.Char(21)
  announcementId String          @unique @map("announcement_id") @db.Char(21)
  status         GleaningStatus  @default(NOT_STARTED)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  announcement   Announcement    @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  participations Participation[]
  reviews        Review[]

  @@map("gleanings")
}

model Participation {
  id         String                 @id @default(nanoid(21)) @db.Char(21)
  createdAt  DateTime               @default(now()) @map("created_at")
  userId     String                 @map("user_id") @db.Char(21)
  gleaningId String                 @map("gleaning_id") @db.Char(21)
  payments   ParticipationPayment[]
  gleaning   Gleaning               @relation(fields: [gleaningId], references: [id], onDelete: Cascade)
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gleaningId])
  @@map("participations")
}

enum UserPlan {
  FREE
  PREMIUM
}

enum UserRole {
  FARMER
  GLEANER
  ADMIN
}

enum GleaningStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  NEW_ANNOUNCEMENT
  PARTICIPATION_JOINED
  ANNOUNCEMENT_REPORTED
  GLEANING_REMINDER_SENT
  GLEANING_CANCELED
  REVIEW_POSTED
  ACCOUNT_BANNED
  FEEDBACK_RECEIVED
  INFO_REVEALED
  NEW_MESSAGE
  PAYMENT_RECEIVED
}

enum Language {
  ENGLISH
  FRENCH
  DUTCH
}

enum CropCategory {
  VEGETABLE
  FRUIT
}

enum CropSeason {
  SPRING
  SUMMER
  FALL
  WINTER
  YEAR_ROUND
}
